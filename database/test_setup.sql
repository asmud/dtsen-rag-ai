-- DTSEN RAG AI - Test Database Setup Script
-- This script provides sample data and test queries for the vector store
-- Run this after init.sql for testing purposes

-- Insert sample test data with realistic embeddings and metadata
-- Note: These are example embeddings - in production they would come from actual embedding models

INSERT INTO data_rag_kb (text, metadata, embedding) VALUES 
(
    'DTSEN is a technology company specializing in artificial intelligence and machine learning solutions.',
    jsonb_build_object(
        'source', 'test_document_1.txt',
        'source_type', 'documents',
        'title', 'DTSEN Company Overview',
        'chunk_id', 'chunk_001',
        'source_document_id', 'doc_dtsen_overview'
    ),
    -- Sample 384-dimensional vector (would be generated by all-MiniLM-L6-v2 in production)
    array_fill(0.1, ARRAY[384])::vector
),
(
    'Retrieval-Augmented Generation (RAG) combines information retrieval with natural language generation.',
    jsonb_build_object(
        'source', 'rag_introduction.md',
        'source_type', 'documents',
        'title', 'Introduction to RAG',
        'chunk_id', 'chunk_002',
        'source_document_id', 'doc_rag_intro'
    ),
    array_fill(0.2, ARRAY[384])::vector
),
(
    'PostgreSQL with pgvector extension provides efficient storage and similarity search for embeddings.',
    jsonb_build_object(
        'source', 'database_setup.md',
        'source_type', 'documents', 
        'title', 'Database Configuration',
        'chunk_id', 'chunk_003',
        'source_document_id', 'doc_db_setup'
    ),
    array_fill(0.3, ARRAY[384])::vector
),
(
    'The all-MiniLM-L6-v2 model generates 384-dimensional embeddings optimized for semantic search.',
    jsonb_build_object(
        'source', 'https://example.com/embeddings',
        'source_type', 'web',
        'title', 'Embedding Models Guide',
        'chunk_id', 'chunk_004',
        'source_document_id', 'web_embeddings_guide',
        'url', 'https://example.com/embeddings'
    ),
    array_fill(0.4, ARRAY[384])::vector
),
(
    'FastAPI provides asynchronous REST API capabilities for the RAG chatbot system.',
    jsonb_build_object(
        'source', 'api_endpoint',
        'source_type', 'api',
        'title', 'API Documentation',
        'chunk_id', 'chunk_005',
        'source_document_id', 'api_docs',
        'endpoint', '/api/docs'
    ),
    array_fill(0.5, ARRAY[384])::vector
);

-- Test vector similarity search queries
-- These demonstrate the types of queries the RAG system would perform

-- 1. Cosine similarity search (most common for RAG)
-- Find documents most similar to a query vector
SELECT 
    id,
    text,
    metadata->>'title' as title,
    metadata->>'source_type' as source_type,
    1 - (embedding <=> array_fill(0.15, ARRAY[384])::vector) as cosine_similarity
FROM data_rag_kb
ORDER BY embedding <=> array_fill(0.15, ARRAY[384])::vector
LIMIT 5;

-- 2. L2 distance search (alternative similarity metric)
SELECT 
    id,
    text,
    metadata->>'title' as title,
    embedding <-> array_fill(0.15, ARRAY[384])::vector as l2_distance
FROM data_rag_kb
ORDER BY embedding <-> array_fill(0.15, ARRAY[384])::vector
LIMIT 3;

-- 3. Filtered similarity search (by source type)
SELECT 
    id,
    text,
    metadata->>'title' as title,
    1 - (embedding <=> array_fill(0.2, ARRAY[384])::vector) as similarity
FROM data_rag_kb
WHERE metadata->>'source_type' = 'documents'
ORDER BY embedding <=> array_fill(0.2, ARRAY[384])::vector
LIMIT 3;

-- Test metadata queries that the RAG system might use

-- 4. Find all document sources
SELECT DISTINCT 
    metadata->>'source_type' as source_type,
    COUNT(*) as document_count
FROM data_rag_kb
GROUP BY metadata->>'source_type'
ORDER BY document_count DESC;

-- 5. Find documents by title pattern
SELECT 
    text,
    metadata->>'title' as title,
    metadata->>'source' as source
FROM data_rag_kb
WHERE metadata->>'title' ILIKE '%RAG%'
ORDER BY created_at;

-- 6. Get documents with specific metadata fields
SELECT 
    text,
    metadata
FROM data_rag_kb
WHERE metadata ? 'url'  -- Has URL field
ORDER BY created_at;

-- Performance and health check queries

-- 7. Check vector dimensions consistency
SELECT DISTINCT vector_dims(embedding) as dimension
FROM data_rag_kb;

-- 8. Verify all embeddings have correct dimension
SELECT 
    COUNT(*) as total_rows,
    COUNT(CASE WHEN vector_dims(embedding) = 384 THEN 1 END) as correct_dimension,
    COUNT(CASE WHEN vector_dims(embedding) != 384 THEN 1 END) as incorrect_dimension
FROM data_rag_kb;

-- 9. Check for null or empty embeddings
SELECT 
    COUNT(*) as total_rows,
    COUNT(CASE WHEN embedding IS NULL THEN 1 END) as null_embeddings,
    COUNT(CASE WHEN array_length(embedding::float[], 1) = 0 THEN 1 END) as empty_embeddings
FROM data_rag_kb;

-- 10. Index usage verification (check if indexes are being used)
EXPLAIN (ANALYZE, BUFFERS) 
SELECT text, metadata->>'title'
FROM data_rag_kb
ORDER BY embedding <=> array_fill(0.1, ARRAY[384])::vector
LIMIT 5;

-- System information queries for debugging

-- 11. Get table size and statistics
SELECT 
    schemaname,
    tablename,
    attname,
    n_distinct,
    correlation
FROM pg_stats 
WHERE tablename = 'data_rag_kb';

-- 12. Check index information
SELECT 
    indexname,
    indexdef
FROM pg_indexes 
WHERE tablename = 'data_rag_kb'
ORDER BY indexname;

-- 13. View current vector store statistics
SELECT * FROM vector_store_stats;

-- 14. Run comprehensive health check
SELECT * FROM check_vector_store_health();

-- Test connection and permissions

-- 15. Test basic CRUD operations
BEGIN;
    -- Insert test record
    INSERT INTO data_rag_kb (text, metadata, embedding) 
    VALUES (
        'Test document for CRUD operations',
        '{"source": "test", "test_type": "crud"}',
        array_fill(0.99, ARRAY[384])::vector
    );
    
    -- Update test record
    UPDATE data_rag_kb 
    SET metadata = metadata || '{"updated": true}'
    WHERE metadata->>'test_type' = 'crud';
    
    -- Query test record
    SELECT text, metadata FROM data_rag_kb 
    WHERE metadata->>'test_type' = 'crud';
    
    -- Clean up test record
    DELETE FROM data_rag_kb 
    WHERE metadata->>'test_type' = 'crud';
ROLLBACK;  -- Rollback to not affect actual data

-- Configuration verification

-- 16. Verify system configuration matches expectations
SELECT 
    key,
    value,
    CASE 
        WHEN key = 'vector_dimension' AND value::text = '384' THEN 'OK'
        WHEN key = 'embedding_model' AND value::text = '"sentence-transformers/all-MiniLM-L6-v2"' THEN 'OK'
        WHEN key = 'collection_name' AND value::text = '"data_rag_kb"' THEN 'OK'
        ELSE 'CHECK'
    END as status
FROM rag_system_info
WHERE key IN ('vector_dimension', 'embedding_model', 'collection_name');

-- Display test summary
DO $$
BEGIN
    RAISE NOTICE '=== DTSEN RAG AI Test Database Setup Complete ===';
    RAISE NOTICE 'Sample data inserted: % rows', (SELECT COUNT(*) FROM data_rag_kb);
    RAISE NOTICE 'Vector dimension verified: %', (SELECT DISTINCT vector_dims(embedding) FROM data_rag_kb);
    RAISE NOTICE 'Unique source types: %', (SELECT COUNT(DISTINCT metadata->>'source_type') FROM data_rag_kb);
    RAISE NOTICE 'All test queries executed successfully';
    RAISE NOTICE 'Run the numbered queries above to test specific functionality';
END $$;